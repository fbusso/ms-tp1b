import numpy as np

# evalua una funcion f (dictonary) en un valor t 
def evaluar(f, t):
    valor = f.get(t)
    return valor if valor else 0

# muestrea una funcion f
def muestrear(funcion, inicio, longitud, periodo):
    muestreo = {}
    for i in range(inicio, inicio + longitud, periodo):        
        muestreo.update({i : evaluar(funcion, i)})

    return muestreo

# definicion de f(t)
# se multiplican en 10 los valores de t
f = {
    0 :  0.60399859,
    1 :  0.14554001,
    2 : -0.32998835,
    3 : -0.71633899,
    4 : -0.94600828,
    5 : -0.99577604,
    6 : -0.88049313,
    7 : -0.64042494,
    8 : -0.32716454,
    9 :  0.00834848,
    10 :  0.32394707,
    11 :  0.59023391,
    12 :  0.79115710,
    13 :  0.92228396,
    14 :  0.98790357,
    15 :  0.99786530,
    16 :  0.96475061,
    17 :  0.90168212,
    18 :  0.82084795,
    19 :  0.73267495,
    20 :  0.64551246,
    21 :  0.56566882,
    22 :  0.49765584,
    23 :  0.44452514,
    24 :  0.40821154,
    25 :  0.38982733,
    26 :  0.38987337,
    27 :  0.40834847,
    28 :  0.44474907,
    29 :  0.49795939,
    30 :  0.56603985,
    31 :  0.64593243,
    32 :  0.73311717,
    33 :  0.82127608,
    34 :  0.90204934,
    35 :  0.96500018,
    36 :  0.99793332,
    37 :  0.98772459,
    38 :  0.92180010,
    39 :  0.79033070,
    40 :  0.58906280,
    41 :  0.32248027,
    42 :  0.00669853,
    43 : -0.32881774,
    44 : -0.64184468,
    45 : -0.88141587,
    46 : -0.99596217,
    47 : -0.94530919,
    48 : -0.71476724,
    49 : -0.32776907,
    50 :  0.14796348,
    51 :  0.60602894,
    52 :  0.92219125,
    53 :  0.98940997,
    54 :  0.75933068,
    55 :  0.27571541,
    56 : -0.31809185,
    57 : -0.81158859,
    58 : -0.99981338,
    59 : -0.77589120,
    60 : -0.20325046,
    61 :  0.47843661,
    62 :  0.93996354,
    63 :  0.92281285,
    64 :  0.39995632,
    65 : -0.36392724,
    66 : -0.92327895,
    67 : -0.90901390,
    68 : -0.29232950,
    69 :  0.53768427,
    70 :  0.99296838,
    71 :  0.70675762,
    72 : -0.13929110,
    73 : -0.88406775,
    74 : -0.88766395,
    75 : -0.10709139,
    76 :  0.78192808,
    77 :  0.93864831,
    78 :  0.17257156,
    79 : -0.77827263,
    80 : -0.91848508,
    81 : -0.05864878,
    82 :  0.87574052,
    83 :  0.80094694,
    84 : -0.23476314,
    85 : -0.98908693,
    86 : -0.49046021,
    87 :  0.65450841,
    88 :  0.92529413,
    89 : -0.08443892,
    90 : -0.98010495,
    91 : -0.44757622,
    92 :  0.75953434,
    93 :  0.80296049,
    94 : -0.42105150,
    95 : -0.96872462,
    96 :  0.08690187,
    97 :  0.99839668,
    98 :  0.17920768,
    99 : -0.96004668,
    100 : -0.35879227,
    101 :  0.90887401,
    102 :  0.45588504,
    103 : -0.87929677,
    104 : -0.47886290,
    105 :  0.88597440,
    106 :  0.43041424,
    107 : -0.92581961,
    108 : -0.30519606,
    109 :  0.97748759,
    110 :  0.09479441,
    111 : -0.99908350,
    112 :  0.19932632,
    113 :  0.92917412,
    114 : -0.54524197,
    115 : -0.70040510,
    116 :  0.85888317,
    117 :  0.27573818,
    118 : -0.99999959,
    119 :  0.29327414,
    120 :  0.81602072,
    121 : -0.81634673,
    122 : -0.25406952,
    123 :  0.99255893,
    124 : -0.49785336,
    125 : -0.58956553,
    126 :  0.98176413,
    127 : -0.26488678,
    128 : -0.73336336,
    129 :  0.94806424,
    130 : -0.19469962,
    131 : -0.74135789,
    132 :  0.96236060,
    133 : -0.30002217,
    134 : -0.61786678,
    135 :  0.99894801,
    136 : -0.55999568,
    137 : -0.31082610,
    138 :  0.93434075,
    139 : -0.87476242,
    140 :  0.21315460,
    141 :  0.57715455,
    142 : -0.98941705,
    143 :  0.79956305,
    144 : -0.15618263,
    145 : -0.55870039,
    146 :  0.96929825,
    147 : -0.89560500,
    148 :  0.40816829,
    149 :  0.24623716,
    150 : -0.78204386,
    151 :  0.99904027,
    152 : -0.84452028,
    153 :  0.40486034,
    154 :  0.15133290,
    155 : -0.64464530,
    156 :  0.94218823,
    157 : -0.98612970,
    158 :  0.79299258,
    159 : -0.43267954,
    160 : -0.00067983,
    161 :  0.41570924,
    162 : -0.74241309,
    163 :  0.94063889,
    164 : -0.99976987,
    165 :  0.93265359,
    166 : -0.76700281,
    167 :  0.53686286,
    168 : -0.27575166,
    169 :  0.01212864,
    170 :  0.23285632,
    171 : -0.44578978,
    172 :  0.62020109,
    173 : -0.75512297,
    174 :  0.85345772,
    175 : -0.92044873,
    176 :  0.96241795,
    177 : -0.98582333,
    178 :  0.99662008,
    179 : -0.99987202,
    180 :  0.99954571,
    181 : -0.99842195,
    182 :  0.99807060,
    183 : -0.99884957,
    184 :  0.99990596,
    185 : -0.99917419,
    186 :  0.99338329,
    187 : -0.97810225,
    188 :  0.94786928,
    189 : -0.89646401,
    190 :  0.81739059,
    191 : -0.70463558,
    192 :  0.55374255,
    193 : -0.36319497,
    194 :  0.13601449,
    195 :  0.11863985,
    196 : -0.38423336,
    197 :  0.63648677,
    198 : -0.84447918,
    199 :  0.97379232,
    200 : -0.99202085,
    201 :  0.87644497,
    202 : -0.62284290,
    203 :  0.25341990,
    204 :  0.17907228,
    205 : -0.59430464,
    206 :  0.89696591,
    207 : -0.99925437,
    208 :  0.84975472,
    209 : -0.46068117,
    210 : -0.07801548,
    211 :  0.60920063,
    212 : -0.94964769,
    213 :  0.95578736,
    214 : -0.59323260,
    215 : -0.02228707,
    216 :  0.64402360,
    217 : -0.98498785,
    218 :  0.85556006,
    219 : -0.28487340,
    220 : -0.45197932,
    221 :  0.94801540,
    222 : -0.88965769,
    223 :  0.27485378,
    224 :  0.53103345,
    225 : -0.98837627,
    226 :  0.74794339,
    227 :  0.05357345,
    228 : -0.82615919,
    229 :  0.94268212,
    230 : -0.26839017,
    231 : -0.64973505,
    232 :  0.99083434,
    233 : -0.40423484,
    234 : -0.58356776,
    235 :  0.99377069,
    236 : -0.37060724,
    237 : -0.65930544,
    238 :  0.96410206,
    239 : -0.16157197,
    240 : -0.84015774,
    241 :  0.82151405,
    242 :  0.23381153,
    243 : -0.99343569,
    244 :  0.43062208,
    245 :  0.72784591,
    246 : -0.86540591,
    247 : -0.25185587,
    248 :  0.99999006,
    249 : -0.22367219,
    250 : -0.90665101,
    251 :  0.58538793,
    252 :  0.70021521,
    253 : -0.81034251,
    254 : -0.47636947,
    255 :  0.92601453,
    256 :  0.29336323,
    257 : -0.97400636,
    258 : -0.17840480,
    259 :  0.98872230,
    260 :  0.14091646,
    261 : -0.98838709,
    262 : -0.18277581,
    263 :  0.97247472,
    264 :  0.30184862,
    265 : -0.92176350,
    266 : -0.48804909,
    267 :  0.80113073,
    268 :  0.71279498,
    269 : -0.56905823,
    270 : -0.91580079,
    271 :  0.19978458,
    272 :  0.99951572,
    273 :  0.27970226,
    274 : -0.84940210,
    275 : -0.75029356,
    276 :  0.39826932,
    277 :  0.99704709,
    278 :  0.27250225,
    279 : -0.79671653,
    280 : -0.86342240,
    281 :  0.11536309,
    282 :  0.94997500,
    283 :  0.69685389,
    284 : -0.32057247,
    285 : -0.98605008,
    286 : -0.62948345,
    287 :  0.34866567,
    288 :  0.98051818,
    289 :  0.69733675,
    290 : -0.20362622,
    291 : -0.91747892,
    292 : -0.86410112,
    293 : -0.12658588,
    294 :  0.69571076,
    295 :  0.99720020,
    296 :  0.59704555,
    297 : -0.19496540,
    298 : -0.84797735,
    299 : -0.97200057,
    300 : -0.52937573,
}

# definicion de R[n]
r = {
    -7 : 1,
    -6 : 1,
    -5 : 1,
    -4 : 1,
    -3 : 1,
    -2 : 1,
    -1 : 1,
    -0 : 1,
    1 : 1,
    2 : 1,
    3 : 1,
    4 : 1,
    5 : 1,
    6 : 1,
    7 : 1
}

# determina g[n]
conv = np.convolve(list(r.values()), list(r.values()), mode='full')
maximo = max(conv)

g = []
for valor in conv:
    g.append(valor/maximo)
    




